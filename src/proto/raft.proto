syntax="proto3";

package raft;

option cc_generic_services = true;

import "src/proto/common.proto";

message ConfState {
    // The voters in the incoming config. (If the configuration is not joint,
    // then the outgoing config is empty).
    repeated uint64 voters = 1;
    // The learners in the incoming config.
    repeated uint64 learners = 2;
    // The voters in the outgoing config.
    repeated uint64 voters_outgoing = 3;
    // The nodes that will become learners when the outgoing config is removed.
    // These nodes are necessarily currently in nodes_joint (or they would have
    // been added to the incoming config right away).
    repeated uint64 learners_next = 4;
    // If set, the config is joint and Raft will automatically transition into
    // the final config (i.e. remove the outgoing config) when this is safe.
    bool     auto_leave = 5;
};

message SnapshotMetadata {
    ConfState confstate = 1;
    uint64    index = 2;
    uint64    term = 3;
};

message LogEntryPB
{
    uint64 index = 1;
    uint64 term = 2;
    bytes  data = 3;
};

message Snapshot {
    bytes            data = 1;
    SnapshotMetadata meta = 2;
};

enum RoleType
{
    INITIAL = 0;
    FOLLOWER = 1;
    CANDIDATE = 2;
    LEADER = 3;
};

message AppendEntriesRequest
{
    uint64     term = 1;
    ServerId   leader_id = 2;
    int64      prev_log_index = 3;
    uint64     prev_log_term = 4;
    repeated   LogEntryPB   entries = 5;
    int64      leader_commit = 6;
};

message AppendEntriesResponse
{
    uint64 term = 1;
    bool   success = 2;
};

message RequestVoteRequest
{
    uint64   term = 1;
    ServerId candidate_id = 2;
    int64    last_log_index = 3;
    uint64   last_log_term = 4;
};

message RequestVoteResponse
{
    uint64 term = 1;
    bool   vote_granted = 2;
};

service RaftService
{
    rpc AppendEntries(AppendEntriesRequest) returns (AppendEntriesResponse);
    rpc RequestVote(RequestVoteRequest) returns (RequestVoteResponse);
};
